import java.util.*;

class Solution {
    int raX, raY, stX, stY, edX, edY;
    int answer = -1;
    int[][] dist;
    int[][] dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    
    public int solution(String[] maps) {
        
        findSites(maps);
        
        int result = bfs(stY, stX, raY, raX, maps);
        
        // 도달할 수 있으면 다음 진행
        if(result != -1) {
            answer = result;
            result = bfs(raY, raX, edY, edX, maps);
        }
        
        if(result == -1) answer = -1;
        else answer += result;
        
        return answer;
    }
    
    int bfs(int startY, int startX, int targetY, int targetX, String[] maps) {
        
        dist = new int[maps.length][maps[0].length()];

        Queue<Integer> Q = new LinkedList<>();
        Q.add(startY); Q.add(startX);
        // 1부터 시작
        dist[startY][startX] = 1;
        
        while(!Q.isEmpty()) {
            int y = Q.poll(); 
            int x = Q.poll();
            
            // 목표지점에 도달했으면 종료
            if(y == targetY && x == targetX) {
                break;
            }
            
            for(int i = 0; i < 4; i ++) {
                int ny = y + dir[i][0];
                int nx = x + dir[i][1];
                
                // 맵안, 방문 안한, 벽 X이면 진행
                if(ny < 0 || nx < 0 || ny >= maps.length || nx >= maps[0].length()) continue;
                if(dist[ny][nx] != 0) continue;
                if(maps[ny].charAt(nx) == 'X') continue;
                
                Q.add(ny); Q.add(nx);
                dist[ny][nx] = dist[y][x] + 1;
            }
        }
        
        // 목표지점 도달 했으면 경과 시간, 못했으면 -1 리턴
        return (dist[targetY][targetX]==0) ? -1 : dist[targetY][targetX] - 1;
    }
    
    void findSites(String[] maps) {
        for(int i = 0; i < maps.length; i++) {
            for(int j = 0; j < maps[0].length(); j++) {
                char c = maps[i].charAt(j);
                if(c == 'S') {
                    stY = i; stX = j;
                } else if(c == 'E') {
                    edY = i; edX = j;
                } else if(c == 'L') {
                    raY = i; raX = j;
                }
            }
        }
    }
    
    
}

/*
1. 접근
2차원 배열에서 출구에 도달하는 최단 거리 문제이므로 BFS를 사용한다.
Start -> 레버 1만, 레번 -> 출구 1만 정도에 가능하다. * 4
2. 구현
start -> 레버 BFS로 최소 시간을 구한다.
레버 - > Exit BFS로 최소 시간을 구한다.
하나라도 도달 불가이면 -1을 출력한다.


*/